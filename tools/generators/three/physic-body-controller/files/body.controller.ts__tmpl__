// GENERATED
import {
  Controller,
  createControllerProviderFactory,
} from '@angular-three/core';
import {
  Directive,
  Input,
  NgModule,
  NgZone,
  OnInit,
  Optional,
} from '@angular/core';
import { requestAnimationFrame } from '@rx-angular/cdk';
import * as THREE from 'three';
import { NgtPhysicConstraintStore } from '../constraint/constraint.store';
import { BodyProps } from '../models/body';
import { GetByIndex } from '../models/types';
import { NgtPhysicBodyStore } from './body.store';

@Directive({
  selector: `<% if (selectors.length) { %><% for (const selector of selectors) { %>
    [ngtPhysic<%= selector.selector %>]<% if (!selector.isLast) { %>,<% } %><% } %><% } %>
  `,
  exportAs: 'ngtPhysicBody',
  providers: [NgtPhysicBodyStore],
})
export class NgtPhysicBodyController extends Controller implements OnInit {
  @Input() set getPhysicProps(fn: GetByIndex<BodyProps> | undefined) {
    this.physicBodyStore.set({ getPhysicProps: fn });
  }

  constructor(
    private physicBodyStore: NgtPhysicBodyStore,
    ngZone: NgZone,
    @Optional() physicConstraintStore: NgtPhysicConstraintStore
  ) {
    super(ngZone);
    if (physicConstraintStore) {
      physicConstraintStore.set((oldState) => ({
        bodies: [...oldState.bodies, this],
      }));
    }
  }

  ngOnInit() {
    super.ngOnInit();
    requestAnimationFrame(() => {
      this.physicBodyStore.init();
    });
  }

  get object3d(): THREE.Object3D {
    return this.physicBodyStore.get('object3d') as THREE.Object3D;
  }

  get api() {
    return this.physicBodyStore.api;
  }

  get controller(): Controller | undefined {
    return undefined;
  }

  get props(): string[] {
    return [];
  }
}

@NgModule({
  declarations: [NgtPhysicBodyController],
  exports: [NgtPhysicBodyController],
})
export class NgtPhysicBodyControllerModule {}

export const [
  NGT_PHYSIC_BODY_WATCHED_CONTROLLER,
  NGT_PHYSIC_BODY_CONTROLLER_PROVIDER,
] = createControllerProviderFactory({
  watchedControllerTokenName: 'Watched PhysicBodyController',
  controller: NgtPhysicBodyController,
});
